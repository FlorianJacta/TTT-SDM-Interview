[TAIPY]

[JOB]
mode = "standalone"
max_nb_of_workers = "5:int"

[DATA_NODE.initial_data]
storage_type = "csv"
scope = "GLOBAL:SCOPE"
path = "data/modified_supermarkt_sales_plus.csv"

[DATA_NODE.date]
scope = "GLOBAL:SCOPE"

[DATA_NODE.final_data]
scope = "GLOBAL:SCOPE"

[DATA_NODE.model_xgboost_elect]
scope = "GLOBAL:SCOPE"

[DATA_NODE.model_xgboost_fash]
scope = "GLOBAL:SCOPE"

[DATA_NODE.predictions_xgboost]
scope = "GLOBAL:SCOPE"

[DATA_NODE.demand]
storage_type = "csv"
scope = "GLOBAL:SCOPE"
default_path = "data/demand.csv"

[DATA_NODE.fixed_variables]
storage_type = "csv"

[DATA_NODE.solver_name]
default_data = "Default"

[DATA_NODE.model_created]

[DATA_NODE.model_solved]

[DATA_NODE.results]

[TASK.task_preprocess_data]
function = "algos.algos.preprocess:function"
inputs = [ "initial_data:SECTION",]
outputs = [ "final_data:SECTION", "date:SECTION",]
skippable = "True:bool"

[TASK.task_train]
function = "algos.algos.train_xgboost:function"
inputs = [ "final_data:SECTION",]
outputs = [ "model_xgboost_elect:SECTION", "model_xgboost_fash:SECTION",]
skippable = "True:bool"

[TASK.task_forecast]
function = "algos.algos.forecast_xgboost:function"
inputs = [ "model_xgboost_elect:SECTION", "model_xgboost_fash:SECTION", "date:SECTION",]
outputs = [ "predictions_xgboost:SECTION",]
skippable = "True:bool"

[TASK.task_convert_to_demand]
function = "algos.algos.convert_to_demand:function"
inputs = [ "date:SECTION", "predictions_xgboost:SECTION",]
outputs = [ "demand:SECTION",]
skippable = "True:bool"

[TASK.create_model]
function = "algos.algos.create_model:function"
inputs = [ "demand:SECTION", "fixed_variables:SECTION",]
outputs = [ "model_created:SECTION",]
skippable = "True:bool"

[TASK.solve_model]
function = "algos.algos.solve_model:function"
inputs = [ "model_created:SECTION", "solver_name:SECTION",]
outputs = [ "model_solved:SECTION",]
skippable = "True:bool"

[TASK.create_results]
function = "algos.algos.create_results:function"
inputs = [ "model_solved:SECTION", "fixed_variables:SECTION", "demand:SECTION",]
outputs = [ "results:SECTION",]
skippable = "True:bool"

[SCENARIO.merged_scenario]
tasks = [ "task_preprocess_data:SECTION", "task_train:SECTION", "task_forecast:SECTION", "task_convert_to_demand:SECTION", "create_model:SECTION", "solve_model:SECTION", "create_results:SECTION",]
additional_data_nodes = []
frequency = "MONTHLY:FREQUENCY"

[DATA_NODE.fixed_variables.default_data]
Max_Capacity_FPA = [ "15000:int",]
cost_FPA_Back_Order = [ "200:int",]
cost_FPA_Stock = [ "45:int",]
Initial_Back_Order_FPA = [ "0:int",]
Initial_Stock_FPA = [ "5000:int",]
Initial_Production_FPA = [ "3000:int",]
number_RPone_to_produce_FPA = [ "20:int",]
number_RPtwo_to_produce_FPA = [ "15:int",]
Max_Capacity_FPB = [ "7000:int",]
cost_FPB_Back_Order = [ "250:int",]
cost_FPB_Stock = [ "40:int",]
Initial_Back_Order_FPB = [ "0:int",]
Initial_Stock_FPB = [ "10000:int",]
Initial_Production_FPB = [ "5000:int",]
number_RPone_to_produce_FPB = [ "50:int",]
number_RPtwo_to_produce_FPB = [ "45:int",]
Initial_Stock_RPone = [ "10000:int",]
Max_Stock_RPone = [ "100000:int",]
cost_RPone_Stock = [ "30:int",]
cost_RPone_Purchase = [ "100:int",]
Initial_Purchase_RPone = [ "10000:int",]
Initial_Stock_RPtwo = [ "10000:int",]
Max_Stock_RPtwo = [ "100000:int",]
cost_RPtwo_Stock = [ "60:int",]
cost_RPtwo_Purchase = [ "150:int",]
Initial_Purchase_RPtwo = [ "10000:int",]
Weight_of_Stock = [ "100:int",]
Weight_of_Back_Order = [ "100:int",]
Max_Capacity_of_FPA_and_FPB = [ "100000:int",]

[SCENARIO.merged_scenario.comparators]

[SCENARIO.merged_scenario.sequences]
